using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Telegram.Bot;
using Telegram.Bot.Types;
using System;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Collections.Generic;

var builder = WebApplication.CreateBuilder(args);

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É JSON
builder.Services.AddControllers().AddNewtonsoftJson();

string? BotToken = Environment.GetEnvironmentVariable("BOT_TOKEN");
if (string.IsNullOrEmpty(BotToken))
{
    Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
}

Console.WriteLine($"‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {BotToken.Substring(0, 5)}********");

var botClient = new TelegramBotClient(BotToken);
builder.Services.AddSingleton(botClient);

// üü¢ **–•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π**
Queue<string> messageHistory = new Queue<string>();
long lastMessageId = 0;

var app = builder.Build();
app.UseRouting();

// ‚úÖ API –¥–ª—è Unity (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
app.MapPost("/send-message", async (HttpContext context) =>
{
    try
    {
        using var reader = new StreamReader(context.Request.Body);
        string requestBody = await reader.ReadToEndAsync();
        var data = JsonConvert.DeserializeObject<dynamic>(requestBody);

        long chatId = data.chat_id;
        string text = data.text;

        Console.WriteLine($"‚úÖ Unity –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}");

        await botClient.SendTextMessageAsync(chatId, text);

        // üü¢ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        messageHistory.Enqueue($"[Unity] {text}");

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        if (messageHistory.Count > 50)
        {
            messageHistory.Dequeue();
        }

        return Results.Ok();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
        return Results.Problem("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
    }
});

// ‚úÖ **API –¥–ª—è Unity (–ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)**
app.MapGet("/get-latest-messages", () =>
{
    Console.WriteLine("üì• Unity –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
    return Results.Text(string.Join("\n", messageHistory));
});

// ‚úÖ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram (Webhook)**
app.MapPost("/web-hook", async ([FromBody] Update update) =>
{
    try
    {
        if (update?.Message != null)
        {
            long chatId = update.Message.Chat.Id;
            string text = update.Message.Text;
            long messageId = update.Message.MessageId;

            if (messageId > lastMessageId) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            {
                lastMessageId = messageId;
                Console.WriteLine($"‚úÖ Telegram: {text}");

                messageHistory.Enqueue($"[Telegram] {text}");

                // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                if (messageHistory.Count > 50)
                {
                    messageHistory.Dequeue();
                }
            }
        }
        return Results.Ok();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {ex.Message}");
        return Results.Problem("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
    }
});

app.Run();
