using System.IO;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Telegram.Bot;
using Telegram.Bot.Types;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Text.Json;
using System.Threading.Tasks;

var builder = WebApplication.CreateBuilder(args);

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Newtonsoft.Json –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram API
builder.Services.AddControllers().AddNewtonsoftJson();

string? BotToken = Environment.GetEnvironmentVariable("BOT_TOKEN");

if (string.IsNullOrEmpty(BotToken))
{
    Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∑–∞–¥–∞–Ω–∞.");
    return;
}

Console.WriteLine($"‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {BotToken.Substring(0, 5)}********");

var botClient = new TelegramBotClient(BotToken);

// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Telegram Bot
builder.Services.AddSingleton(botClient);

var app = builder.Build();

app.UseRouting();

// ‚úÖ Webhook - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.MapPost("/web-hook", async (HttpContext context) =>
{
    try
    {
        string requestBody = await new StreamReader(context.Request.Body).ReadToEndAsync();
        Console.WriteLine($"üì• –ü–æ–ª—É—á–µ–Ω Webhook JSON: {requestBody}");

        var update = JsonSerializer.Deserialize<Update>(requestBody, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });

        if (update == null)
        {
            Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: JSON –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!");
            context.Response.StatusCode = 400; // Bad Request
            return;
        }

        if (update.Message != null)
        {
            Console.WriteLine($"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.Message.Chat.Id}: {update.Message.Text}");
            await botClient.SendTextMessageAsync(update.Message.Chat.Id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!");
        }

        context.Response.StatusCode = 200;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {ex.Message}");
        context.Response.StatusCode = 500; // Internal Server Error
    }
});

// ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
app.MapControllers();

app.Run();
