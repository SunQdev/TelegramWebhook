using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Telegram.Bot;
using System;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Collections.Generic;

var builder = WebApplication.CreateBuilder(args);

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É JSON
builder.Services.AddControllers().AddNewtonsoftJson();

string? BotToken = Environment.GetEnvironmentVariable("BOT_TOKEN");

if (string.IsNullOrEmpty(BotToken))
{
    Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∑–∞–¥–∞–Ω–∞.");
    return;
}

Console.WriteLine($"‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {BotToken.Substring(0, 5)}********");

var botClient = new TelegramBotClient(BotToken);
builder.Services.AddSingleton(botClient);

// üü¢ –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
List<string> messageHistory = new List<string>();

var app = builder.Build();

app.UseRouting();

// ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
app.UseExceptionHandler(errorApp =>
{
    errorApp.Run(async context =>
    {
        Console.WriteLine("‚ùå –í–µ–±—Ö—É–∫—É –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞ 500");
        context.Response.StatusCode = 500;
        await context.Response.WriteAsync("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!");
    });
});

// ‚úÖ API –¥–ª—è Unity (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
app.MapPost("/send-message", async (HttpContext context) =>
{
    try
    {
        using var reader = new StreamReader(context.Request.Body);
        string requestBody = await reader.ReadToEndAsync();
        var data = JsonConvert.DeserializeObject<dynamic>(requestBody);

        long chatId = data.chat_id;
        string text = data.text;

        Console.WriteLine($"‚úÖ Unity –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}");

        await botClient.SendTextMessageAsync(chatId, text);

        // üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        messageHistory.Add($"[Unity] {text}");

        return Results.Ok();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
        return Results.Problem("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
    }
});

// ‚úÖ API –¥–ª—è Unity (–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)
app.MapGet("/get-messages", () =>
{
    Console.WriteLine("üì• Unity –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è");

    string messages = string.Join("\n", messageHistory);
    return Results.Text(messages);
});

// ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
app.MapControllers();

app.Run();
