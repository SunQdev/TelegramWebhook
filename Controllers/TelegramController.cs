using Microsoft.AspNetCore.Mvc;
using Telegram.Bot;
using Telegram.Bot.Types;
using System;
using System.Threading.Tasks;

[ApiController]
[Route("web-hook")] // üìå –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å URL –≤–µ–±—Ö—É–∫–∞!
public class TelegramController : ControllerBase
{
    private readonly TelegramBotClient _botClient;
    private readonly long _chatId; // üëà –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è chat_id

    public TelegramController(TelegramBotClient botClient)
    {
        _botClient = botClient;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º CHAT_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        string? chatIdEnv = Environment.GetEnvironmentVariable("CHAT_ID");
        if (!long.TryParse(chatIdEnv, out _chatId))
        {
            Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!");
            _chatId = 0; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        else
        {
            Console.WriteLine($"‚úÖ CHAT_ID –∑–∞–≥—Ä—É–∂–µ–Ω: {_chatId}");
        }
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] Update update)
    {
        try
        {
            if (update?.Message != null)
            {
                var incomingChatId = update.Message.Chat.Id;
                var messageText = update.Message.Text;

                Console.WriteLine($"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {incomingChatId}: {messageText}");

                // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ö–æ–¥—è—â–∏–π chat_id —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if (_chatId == 0 || incomingChatId != _chatId)
                {
                    Console.WriteLine($"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {incomingChatId}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.");
                    return Ok();
                }

                await _botClient.SendTextMessageAsync(_chatId, $"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {messageText}");
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!");
            }

            return Ok();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {ex.Message}");
            return StatusCode(500, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
        }
    }
}
